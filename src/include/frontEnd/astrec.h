/* This include file is generated by a bogus awk script... */
/* Try regenerating it with 'awk -f astrec.awk astrec.def' */

#ifndef astrec_h
#define astrec_h

#define NT(node)		ast_get_node_type(node)


#define is_freed_node(node)	(NT(node) == GEN_FREED_NODE)
#define is_null_node(node)	(NT(node) == GEN_NULL_NODE)
#define is_list_of_nodes(node)	(NT(node) == GEN_LIST_OF_NODES)
#define is_error(node)	(NT(node) == GEN_ERROR)
#define is_place_holder(node)	(NT(node) == GEN_PLACE_HOLDER)
#define is_global(node)	(NT(node) == GEN_GLOBAL)
#define is_function(node)	(NT(node) == GEN_FUNCTION)
#define is_program(node)	(NT(node) == GEN_PROGRAM)
#define is_subroutine(node)	(NT(node) == GEN_SUBROUTINE)
#define is_block_data(node)	(NT(node) == GEN_BLOCK_DATA)
#define is_common(node)	(NT(node) == GEN_COMMON)
#define is_common_elt(node)	(NT(node) == GEN_COMMON_ELT)
#define is_dimension(node)	(NT(node) == GEN_DIMENSION)
#define is_equivalence(node)	(NT(node) == GEN_EQUIVALENCE)
#define is_equiv_elt(node)	(NT(node) == GEN_EQUIV_ELT)
#define is_type_statement(node)	(NT(node) == GEN_TYPE_STATEMENT)
#define is_array_decl_len(node)	(NT(node) == GEN_ARRAY_DECL_LEN)
#define is_external(node)	(NT(node) == GEN_EXTERNAL)
#define is_implicit(node)	(NT(node) == GEN_IMPLICIT)
#define is_implicit_elt(node)	(NT(node) == GEN_IMPLICIT_ELT)
#define is_implicit_pair(node)	(NT(node) == GEN_IMPLICIT_PAIR)
#define is_intrinsic(node)	(NT(node) == GEN_INTRINSIC)
#define is_parameter(node)	(NT(node) == GEN_PARAMETER)
#define is_param_elt(node)	(NT(node) == GEN_PARAM_ELT)
#define is_save(node)	(NT(node) == GEN_SAVE)
#define is_comment(node)	(NT(node) == GEN_COMMENT)
#define is_entry(node)	(NT(node) == GEN_ENTRY)
#define is_data(node)	(NT(node) == GEN_DATA)
#define is_implied_do(node)	(NT(node) == GEN_IMPLIED_DO)
#define is_data_elt(node)	(NT(node) == GEN_DATA_ELT)
#define is_stmt_function(node)	(NT(node) == GEN_STMT_FUNCTION)
#define is_format(node)	(NT(node) == GEN_FORMAT)
#define is_assign(node)	(NT(node) == GEN_ASSIGN)
#define is_assignment(node)	(NT(node) == GEN_ASSIGNMENT)
#define is_backspace_short(node)	(NT(node) == GEN_BACKSPACE_SHORT)
#define is_backspace_long(node)	(NT(node) == GEN_BACKSPACE_LONG)
#define is_call(node)	(NT(node) == GEN_CALL)
#define is_close(node)	(NT(node) == GEN_CLOSE)
#define is_continue(node)	(NT(node) == GEN_CONTINUE)
#define is_do(node)	(NT(node) == GEN_DO)
#define is_endfile_short(node)	(NT(node) == GEN_ENDFILE_SHORT)
#define is_endfile_long(node)	(NT(node) == GEN_ENDFILE_LONG)
#define is_assigned_goto(node)	(NT(node) == GEN_ASSIGNED_GOTO)
#define is_computed_goto(node)	(NT(node) == GEN_COMPUTED_GOTO)
#define is_goto(node)	(NT(node) == GEN_GOTO)
#define is_arithmetic_if(node)	(NT(node) == GEN_ARITHMETIC_IF)
#define is_if(node)	(NT(node) == GEN_IF)
#define is_logical_if(node)	(NT(node) == GEN_LOGICAL_IF)
#define is_guard(node)	(NT(node) == GEN_GUARD)
#define is_inquire(node)	(NT(node) == GEN_INQUIRE)
#define is_open(node)	(NT(node) == GEN_OPEN)
#define is_pause(node)	(NT(node) == GEN_PAUSE)
#define is_print(node)	(NT(node) == GEN_PRINT)
#define is_read_short(node)	(NT(node) == GEN_READ_SHORT)
#define is_read_long(node)	(NT(node) == GEN_READ_LONG)
#define is_return(node)	(NT(node) == GEN_RETURN)
#define is_rewind_short(node)	(NT(node) == GEN_REWIND_SHORT)
#define is_rewind_long(node)	(NT(node) == GEN_REWIND_LONG)
#define is_stop(node)	(NT(node) == GEN_STOP)
#define is_write(node)	(NT(node) == GEN_WRITE)
#define is_at(node)	(NT(node) == GEN_AT)
#define is_debug(node)	(NT(node) == GEN_DEBUG)
#define is_traceon(node)	(NT(node) == GEN_TRACEON)
#define is_traceoff(node)	(NT(node) == GEN_TRACEOFF)
#define is_unit(node)	(NT(node) == GEN_UNIT)
#define is_subchk(node)	(NT(node) == GEN_SUBCHK)
#define is_trace(node)	(NT(node) == GEN_TRACE)
#define is_init(node)	(NT(node) == GEN_INIT)
#define is_subtrace(node)	(NT(node) == GEN_SUBTRACE)
#define is_task(node)	(NT(node) == GEN_TASK)
#define is_value_parameter(node)	(NT(node) == GEN_VALUE_PARAMETER)
#define is_parallel(node)	(NT(node) == GEN_PARALLEL)
#define is_parallel_case(node)	(NT(node) == GEN_PARALLEL_CASE)
#define is_do_all(node)	(NT(node) == GEN_DO_ALL)
#define is_task_common(node)	(NT(node) == GEN_TASK_COMMON)
#define is_lock(node)	(NT(node) == GEN_LOCK)
#define is_unlock(node)	(NT(node) == GEN_UNLOCK)
#define is_wait(node)	(NT(node) == GEN_WAIT)
#define is_post(node)	(NT(node) == GEN_POST)
#define is_posting(node)	(NT(node) == GEN_POSTING)
#define is_post_to(node)	(NT(node) == GEN_POST_TO)
#define is_post_inc(node)	(NT(node) == GEN_POST_INC)
#define is_clear(node)	(NT(node) == GEN_CLEAR)
#define is_set_barrier(node)	(NT(node) == GEN_SET_BARRIER)
#define is_block(node)	(NT(node) == GEN_BLOCK)
#define is_semaphore(node)	(NT(node) == GEN_SEMAPHORE)
#define is_event(node)	(NT(node) == GEN_EVENT)
#define is_barrier(node)	(NT(node) == GEN_BARRIER)
#define is_subscript(node)	(NT(node) == GEN_SUBSCRIPT)
#define is_substring(node)	(NT(node) == GEN_SUBSTRING)
#define is_invocation(node)	(NT(node) == GEN_INVOCATION)
#define is_binary_exponent(node)	(NT(node) == GEN_BINARY_EXPONENT)
#define is_binary_times(node)	(NT(node) == GEN_BINARY_TIMES)
#define is_binary_divide(node)	(NT(node) == GEN_BINARY_DIVIDE)
#define is_binary_plus(node)	(NT(node) == GEN_BINARY_PLUS)
#define is_binary_minus(node)	(NT(node) == GEN_BINARY_MINUS)
#define is_binary_concat(node)	(NT(node) == GEN_BINARY_CONCAT)
#define is_binary_and(node)	(NT(node) == GEN_BINARY_AND)
#define is_binary_or(node)	(NT(node) == GEN_BINARY_OR)
#define is_binary_eq(node)	(NT(node) == GEN_BINARY_EQ)
#define is_binary_ne(node)	(NT(node) == GEN_BINARY_NE)
#define is_binary_ge(node)	(NT(node) == GEN_BINARY_GE)
#define is_binary_gt(node)	(NT(node) == GEN_BINARY_GT)
#define is_binary_le(node)	(NT(node) == GEN_BINARY_LE)
#define is_binary_lt(node)	(NT(node) == GEN_BINARY_LT)
#define is_binary_eqv(node)	(NT(node) == GEN_BINARY_EQV)
#define is_binary_neqv(node)	(NT(node) == GEN_BINARY_NEQV)
#define is_unary_minus(node)	(NT(node) == GEN_UNARY_MINUS)
#define is_unary_not(node)	(NT(node) == GEN_UNARY_NOT)
#define is_conditional(node)	(NT(node) == GEN_CONDITIONAL)
#define is_inductive(node)	(NT(node) == GEN_INDUCTIVE)
#define is_repetitive(node)	(NT(node) == GEN_REPETITIVE)
#define is_integer(node)	(NT(node) == GEN_INTEGER)
#define is_real(node)	(NT(node) == GEN_REAL)
#define is_character(node)	(NT(node) == GEN_CHARACTER)
#define is_double_precision(node)	(NT(node) == GEN_DOUBLE_PRECISION)
#define is_complex(node)	(NT(node) == GEN_COMPLEX)
#define is_logical(node)	(NT(node) == GEN_LOGICAL)
#define is_exact(node)	(NT(node) == GEN_EXACT)
#define is_exist_query(node)	(NT(node) == GEN_EXIST_QUERY)
#define is_opened_query(node)	(NT(node) == GEN_OPENED_QUERY)
#define is_number_query(node)	(NT(node) == GEN_NUMBER_QUERY)
#define is_named_query(node)	(NT(node) == GEN_NAMED_QUERY)
#define is_name_query(node)	(NT(node) == GEN_NAME_QUERY)
#define is_access_query(node)	(NT(node) == GEN_ACCESS_QUERY)
#define is_sequential_query(node)	(NT(node) == GEN_SEQUENTIAL_QUERY)
#define is_direct_query(node)	(NT(node) == GEN_DIRECT_QUERY)
#define is_form_query(node)	(NT(node) == GEN_FORM_QUERY)
#define is_formatted_query(node)	(NT(node) == GEN_FORMATTED_QUERY)
#define is_unformatted_query(node)	(NT(node) == GEN_UNFORMATTED_QUERY)
#define is_recl_query(node)	(NT(node) == GEN_RECL_QUERY)
#define is_blank_query(node)	(NT(node) == GEN_BLANK_QUERY)
#define is_nextrec_query(node)	(NT(node) == GEN_NEXTREC_QUERY)
#define is_iostat_query(node)	(NT(node) == GEN_IOSTAT_QUERY)
#define is_file_specify(node)	(NT(node) == GEN_FILE_SPECIFY)
#define is_fmt_specify(node)	(NT(node) == GEN_FMT_SPECIFY)
#define is_rec_specify(node)	(NT(node) == GEN_REC_SPECIFY)
#define is_end_specify(node)	(NT(node) == GEN_END_SPECIFY)
#define is_status_specify(node)	(NT(node) == GEN_STATUS_SPECIFY)
#define is_access_specify(node)	(NT(node) == GEN_ACCESS_SPECIFY)
#define is_form_specify(node)	(NT(node) == GEN_FORM_SPECIFY)
#define is_recl_specify(node)	(NT(node) == GEN_RECL_SPECIFY)
#define is_blank_specify(node)	(NT(node) == GEN_BLANK_SPECIFY)
#define is_unit_specify(node)	(NT(node) == GEN_UNIT_SPECIFY)
#define is_err_specify(node)	(NT(node) == GEN_ERR_SPECIFY)
#define is_label_def(node)	(NT(node) == GEN_LABEL_DEF)
#define is_label_ref(node)	(NT(node) == GEN_LABEL_REF)
#define is_complex_constant(node)	(NT(node) == GEN_COMPLEX_CONSTANT)
#define is_constant(node)	(NT(node) == GEN_CONSTANT)
#define is_letter(node)	(NT(node) == GEN_LETTER)
#define is_text(node)	(NT(node) == GEN_TEXT)
#define is_identifier(node)	(NT(node) == GEN_IDENTIFIER)
#define is_star(node)	(NT(node) == GEN_STAR)
#define is_return_label(node)	(NT(node) == GEN_RETURN_LABEL)
#define is_type_len(node)	(NT(node) == GEN_TYPE_LEN)
#define is_dim(node)	(NT(node) == GEN_DIM)
#define is_repeat(node)	(NT(node) == GEN_REPEAT)
#define is_decl(node)	(NT(node) == GEN_DECL)
#define is_parallelloop(node)	(NT(node) == GEN_PARALLELLOOP)
#define is_private(node)	(NT(node) == GEN_PRIVATE)
#define is_stoploop(node)	(NT(node) == GEN_STOPLOOP)
#define is_none(node)	(NT(node) == GEN_NONE)
#define is_triplet(node)	(NT(node) == GEN_TRIPLET)
#define is_allocatable(node)	(NT(node) == GEN_ALLOCATABLE)
#define is_allocate(node)	(NT(node) == GEN_ALLOCATE)
#define is_deallocate(node)	(NT(node) == GEN_DEALLOCATE)
#define is_where_block(node)	(NT(node) == GEN_WHERE_BLOCK)
#define is_where(node)	(NT(node) == GEN_WHERE)

#endif
