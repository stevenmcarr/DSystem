/* This include file is generated by a bogus awk script... */
/* Try regenerating it with 'awk -f astcons.awk nodedef.def' */

#ifndef astcons_h
#define astcons_h

#define gen_FREED_NODE()   \
	gen_node(GEN_FREED_NODE)
#define gen_NULL_NODE()   \
	gen_node(GEN_NULL_NODE)
#define gen_LIST_OF_NODES()   \
	gen_node(GEN_LIST_OF_NODES)
#define gen_ERROR(a,b,c,d,e,f)   \
	gen_node(GEN_ERROR,a,b,c,d,e,f)
#define gen_PLACE_HOLDER()   \
	gen_node(GEN_PLACE_HOLDER)
#define gen_GLOBAL(a)   \
	gen_node(GEN_GLOBAL,a)
#define gen_FUNCTION(a,b,c,d,e,f)   \
	gen_node(GEN_FUNCTION,a,b,c,d,e,f)
#define gen_PROGRAM(a,b,c,d)   \
	gen_node(GEN_PROGRAM,a,b,c,d)
#define gen_SUBROUTINE(a,b,c,d,e)   \
	gen_node(GEN_SUBROUTINE,a,b,c,d,e)
#define gen_BLOCK_DATA(a,b,c,d)   \
	gen_node(GEN_BLOCK_DATA,a,b,c,d)
#define gen_COMMON(a,b)   \
	gen_node(GEN_COMMON,a,b)
#define gen_COMMON_ELT(a,b)   \
	gen_node(GEN_COMMON_ELT,a,b)
#define gen_DIMENSION(a,b)   \
	gen_node(GEN_DIMENSION,a,b)
#define gen_EQUIVALENCE(a,b)   \
	gen_node(GEN_EQUIVALENCE,a,b)
#define gen_EQUIV_ELT(a)   \
	gen_node(GEN_EQUIV_ELT,a)
#define gen_TYPE_STATEMENT(a,b,c)   \
	gen_node(GEN_TYPE_STATEMENT,a,b,c)
#define gen_ARRAY_DECL_LEN(a,b,c,d)   \
	gen_node(GEN_ARRAY_DECL_LEN,a,b,c,d)
#define gen_EXTERNAL(a,b)   \
	gen_node(GEN_EXTERNAL,a,b)
#define gen_IMPLICIT(a,b)   \
	gen_node(GEN_IMPLICIT,a,b)
#define gen_IMPLICIT_ELT(a,b)   \
	gen_node(GEN_IMPLICIT_ELT,a,b)
#define gen_IMPLICIT_PAIR(a,b)   \
	gen_node(GEN_IMPLICIT_PAIR,a,b)
#define gen_INTRINSIC(a,b)   \
	gen_node(GEN_INTRINSIC,a,b)
#define gen_PARAMETER(a,b)   \
	gen_node(GEN_PARAMETER,a,b)
#define gen_PARAM_ELT(a,b)   \
	gen_node(GEN_PARAM_ELT,a,b)
#define gen_SAVE(a,b)   \
	gen_node(GEN_SAVE,a,b)
#define gen_COMMENT(a)   \
	gen_node(GEN_COMMENT,a)
#define gen_ENTRY(a,b,c)   \
	gen_node(GEN_ENTRY,a,b,c)
#define gen_DATA(a,b)   \
	gen_node(GEN_DATA,a,b)
#define gen_IMPLIED_DO(a,b,c,d,e)   \
	gen_node(GEN_IMPLIED_DO,a,b,c,d,e)
#define gen_DATA_ELT(a,b)   \
	gen_node(GEN_DATA_ELT,a,b)
#define gen_STMT_FUNCTION(a,b,c,d)   \
	gen_node(GEN_STMT_FUNCTION,a,b,c,d)
#define gen_FORMAT(a,b)   \
	gen_node(GEN_FORMAT,a,b)
#define gen_ASSIGN(a,b,c)   \
	gen_node(GEN_ASSIGN,a,b,c)
#define gen_ASSIGNMENT(a,b,c)   \
	gen_node(GEN_ASSIGNMENT,a,b,c)
#define gen_BACKSPACE_SHORT(a,b)   \
	gen_node(GEN_BACKSPACE_SHORT,a,b)
#define gen_BACKSPACE_LONG(a,b)   \
	gen_node(GEN_BACKSPACE_LONG,a,b)
#define gen_CALL(a,b)   \
	gen_node(GEN_CALL,a,b)
#define gen_CLOSE(a,b)   \
	gen_node(GEN_CLOSE,a,b)
#define gen_CONTINUE(a)   \
	gen_node(GEN_CONTINUE,a)
#define gen_DO(a,b,c,d,e)   \
	gen_node(GEN_DO,a,b,c,d,e)
#define gen_ENDFILE_SHORT(a,b)   \
	gen_node(GEN_ENDFILE_SHORT,a,b)
#define gen_ENDFILE_LONG(a,b)   \
	gen_node(GEN_ENDFILE_LONG,a,b)
#define gen_ASSIGNED_GOTO(a,b,c)   \
	gen_node(GEN_ASSIGNED_GOTO,a,b,c)
#define gen_COMPUTED_GOTO(a,b,c)   \
	gen_node(GEN_COMPUTED_GOTO,a,b,c)
#define gen_GOTO(a,b)   \
	gen_node(GEN_GOTO,a,b)
#define gen_ARITHMETIC_IF(a,b,c,d,e)   \
	gen_node(GEN_ARITHMETIC_IF,a,b,c,d,e)
#define gen_IF(a,b,c)   \
	gen_node(GEN_IF,a,b,c)
#define gen_LOGICAL_IF(a,b,c)   \
	gen_node(GEN_LOGICAL_IF,a,b,c)
#define gen_GUARD(a,b,c)   \
	gen_node(GEN_GUARD,a,b,c)
#define gen_INQUIRE(a,b)   \
	gen_node(GEN_INQUIRE,a,b)
#define gen_OPEN(a,b)   \
	gen_node(GEN_OPEN,a,b)
#define gen_PAUSE(a,b)   \
	gen_node(GEN_PAUSE,a,b)
#define gen_PRINT(a,b,c)   \
	gen_node(GEN_PRINT,a,b,c)
#define gen_READ_SHORT(a,b,c)   \
	gen_node(GEN_READ_SHORT,a,b,c)
#define gen_READ_LONG(a,b,c)   \
	gen_node(GEN_READ_LONG,a,b,c)
#define gen_RETURN(a,b)   \
	gen_node(GEN_RETURN,a,b)
#define gen_REWIND_SHORT(a,b)   \
	gen_node(GEN_REWIND_SHORT,a,b)
#define gen_REWIND_LONG(a,b)   \
	gen_node(GEN_REWIND_LONG,a,b)
#define gen_STOP(a,b)   \
	gen_node(GEN_STOP,a,b)
#define gen_WRITE(a,b,c)   \
	gen_node(GEN_WRITE,a,b,c)
#define gen_AT(a,b)   \
	gen_node(GEN_AT,a,b)
#define gen_DEBUG(a,b,c,d)   \
	gen_node(GEN_DEBUG,a,b,c,d)
#define gen_TRACEON(a)   \
	gen_node(GEN_TRACEON,a)
#define gen_TRACEOFF(a)   \
	gen_node(GEN_TRACEOFF,a)
#define gen_UNIT(a)   \
	gen_node(GEN_UNIT,a)
#define gen_SUBCHK(a)   \
	gen_node(GEN_SUBCHK,a)
#define gen_TRACE()   \
	gen_node(GEN_TRACE)
#define gen_INIT(a)   \
	gen_node(GEN_INIT,a)
#define gen_SUBTRACE()   \
	gen_node(GEN_SUBTRACE)
#define gen_TASK(a,b,c)   \
	gen_node(GEN_TASK,a,b,c)
#define gen_VALUE_PARAMETER(a)   \
	gen_node(GEN_VALUE_PARAMETER,a)
#define gen_PARALLEL(a,b,c,d,e,f)   \
	gen_node(GEN_PARALLEL,a,b,c,d,e,f)
#define gen_PARALLEL_CASE(a,b,c)   \
	gen_node(GEN_PARALLEL_CASE,a,b,c)
#define gen_DO_ALL(a,b,c,d,e)   \
	gen_node(GEN_DO_ALL,a,b,c,d,e)
#define gen_TASK_COMMON(a,b)   \
	gen_node(GEN_TASK_COMMON,a,b)
#define gen_LOCK(a,b)   \
	gen_node(GEN_LOCK,a,b)
#define gen_UNLOCK(a,b)   \
	gen_node(GEN_UNLOCK,a,b)
#define gen_WAIT(a,b,c)   \
	gen_node(GEN_WAIT,a,b,c)
#define gen_POST(a,b)   \
	gen_node(GEN_POST,a,b)
#define gen_POSTING(a,b)   \
	gen_node(GEN_POSTING,a,b)
#define gen_POST_TO(a)   \
	gen_node(GEN_POST_TO,a)
#define gen_POST_INC(a)   \
	gen_node(GEN_POST_INC,a)
#define gen_CLEAR(a,b)   \
	gen_node(GEN_CLEAR,a,b)
#define gen_SET_BARRIER(a,b,c)   \
	gen_node(GEN_SET_BARRIER,a,b,c)
#define gen_BLOCK(a,b)   \
	gen_node(GEN_BLOCK,a,b)
#define gen_SEMAPHORE()   \
	gen_node(GEN_SEMAPHORE)
#define gen_EVENT()   \
	gen_node(GEN_EVENT)
#define gen_BARRIER()   \
	gen_node(GEN_BARRIER)
#define gen_SUBSCRIPT(a,b)   \
	gen_node(GEN_SUBSCRIPT,a,b)
#define gen_SUBSTRING(a,b,c)   \
	gen_node(GEN_SUBSTRING,a,b,c)
#define gen_INVOCATION(a,b)   \
	gen_node(GEN_INVOCATION,a,b)
#define gen_BINARY_EXPONENT(a,b)   \
	gen_node(GEN_BINARY_EXPONENT,a,b)
#define gen_BINARY_TIMES(a,b)   \
	gen_node(GEN_BINARY_TIMES,a,b)
#define gen_BINARY_DIVIDE(a,b)   \
	gen_node(GEN_BINARY_DIVIDE,a,b)
#define gen_BINARY_PLUS(a,b)   \
	gen_node(GEN_BINARY_PLUS,a,b)
#define gen_BINARY_MINUS(a,b)   \
	gen_node(GEN_BINARY_MINUS,a,b)
#define gen_BINARY_CONCAT(a,b)   \
	gen_node(GEN_BINARY_CONCAT,a,b)
#define gen_BINARY_AND(a,b)   \
	gen_node(GEN_BINARY_AND,a,b)
#define gen_BINARY_OR(a,b)   \
	gen_node(GEN_BINARY_OR,a,b)
#define gen_BINARY_EQ(a,b)   \
	gen_node(GEN_BINARY_EQ,a,b)
#define gen_BINARY_NE(a,b)   \
	gen_node(GEN_BINARY_NE,a,b)
#define gen_BINARY_GE(a,b)   \
	gen_node(GEN_BINARY_GE,a,b)
#define gen_BINARY_GT(a,b)   \
	gen_node(GEN_BINARY_GT,a,b)
#define gen_BINARY_LE(a,b)   \
	gen_node(GEN_BINARY_LE,a,b)
#define gen_BINARY_LT(a,b)   \
	gen_node(GEN_BINARY_LT,a,b)
#define gen_BINARY_EQV(a,b)   \
	gen_node(GEN_BINARY_EQV,a,b)
#define gen_BINARY_NEQV(a,b)   \
	gen_node(GEN_BINARY_NEQV,a,b)
#define gen_UNARY_MINUS(a)   \
	gen_node(GEN_UNARY_MINUS,a)
#define gen_UNARY_NOT(a)   \
	gen_node(GEN_UNARY_NOT,a)
#define gen_CONDITIONAL(a)   \
	gen_node(GEN_CONDITIONAL,a)
#define gen_INDUCTIVE(a,b,c,d)   \
	gen_node(GEN_INDUCTIVE,a,b,c,d)
#define gen_REPETITIVE(a)   \
	gen_node(GEN_REPETITIVE,a)
#define gen_INTEGER()   \
	gen_node(GEN_INTEGER)
#define gen_REAL()   \
	gen_node(GEN_REAL)
#define gen_CHARACTER()   \
	gen_node(GEN_CHARACTER)
#define gen_DOUBLE_PRECISION()   \
	gen_node(GEN_DOUBLE_PRECISION)
#define gen_COMPLEX()   \
	gen_node(GEN_COMPLEX)
#define gen_LOGICAL()   \
	gen_node(GEN_LOGICAL)
#define gen_EXACT()   \
	gen_node(GEN_EXACT)
#define gen_EXIST_QUERY(a)   \
	gen_node(GEN_EXIST_QUERY,a)
#define gen_OPENED_QUERY(a)   \
	gen_node(GEN_OPENED_QUERY,a)
#define gen_NUMBER_QUERY(a)   \
	gen_node(GEN_NUMBER_QUERY,a)
#define gen_NAMED_QUERY(a)   \
	gen_node(GEN_NAMED_QUERY,a)
#define gen_NAME_QUERY(a)   \
	gen_node(GEN_NAME_QUERY,a)
#define gen_ACCESS_QUERY(a)   \
	gen_node(GEN_ACCESS_QUERY,a)
#define gen_SEQUENTIAL_QUERY(a)   \
	gen_node(GEN_SEQUENTIAL_QUERY,a)
#define gen_DIRECT_QUERY(a)   \
	gen_node(GEN_DIRECT_QUERY,a)
#define gen_FORM_QUERY(a)   \
	gen_node(GEN_FORM_QUERY,a)
#define gen_FORMATTED_QUERY(a)   \
	gen_node(GEN_FORMATTED_QUERY,a)
#define gen_UNFORMATTED_QUERY(a)   \
	gen_node(GEN_UNFORMATTED_QUERY,a)
#define gen_RECL_QUERY(a)   \
	gen_node(GEN_RECL_QUERY,a)
#define gen_BLANK_QUERY(a)   \
	gen_node(GEN_BLANK_QUERY,a)
#define gen_NEXTREC_QUERY(a)   \
	gen_node(GEN_NEXTREC_QUERY,a)
#define gen_IOSTAT_QUERY(a)   \
	gen_node(GEN_IOSTAT_QUERY,a)
#define gen_FILE_SPECIFY(a)   \
	gen_node(GEN_FILE_SPECIFY,a)
#define gen_FMT_SPECIFY(a)   \
	gen_node(GEN_FMT_SPECIFY,a)
#define gen_REC_SPECIFY(a)   \
	gen_node(GEN_REC_SPECIFY,a)
#define gen_END_SPECIFY(a)   \
	gen_node(GEN_END_SPECIFY,a)
#define gen_STATUS_SPECIFY(a)   \
	gen_node(GEN_STATUS_SPECIFY,a)
#define gen_ACCESS_SPECIFY(a)   \
	gen_node(GEN_ACCESS_SPECIFY,a)
#define gen_FORM_SPECIFY(a)   \
	gen_node(GEN_FORM_SPECIFY,a)
#define gen_RECL_SPECIFY(a)   \
	gen_node(GEN_RECL_SPECIFY,a)
#define gen_BLANK_SPECIFY(a)   \
	gen_node(GEN_BLANK_SPECIFY,a)
#define gen_UNIT_SPECIFY(a)   \
	gen_node(GEN_UNIT_SPECIFY,a)
#define gen_ERR_SPECIFY(a)   \
	gen_node(GEN_ERR_SPECIFY,a)
#define gen_LABEL_DEF()   \
	gen_node(GEN_LABEL_DEF)
#define gen_LABEL_REF()   \
	gen_node(GEN_LABEL_REF)
#define gen_COMPLEX_CONSTANT(a,b)   \
	gen_node(GEN_COMPLEX_CONSTANT,a,b)
#define gen_CONSTANT()   \
	gen_node(GEN_CONSTANT)
#define gen_LETTER()   \
	gen_node(GEN_LETTER)
#define gen_TEXT()   \
	gen_node(GEN_TEXT)
#define gen_IDENTIFIER()   \
	gen_node(GEN_IDENTIFIER)
#define gen_STAR()   \
	gen_node(GEN_STAR)
#define gen_RETURN_LABEL(a)   \
	gen_node(GEN_RETURN_LABEL,a)
#define gen_TYPE_LEN(a,b)   \
	gen_node(GEN_TYPE_LEN,a,b)
#define gen_DIM(a,b)   \
	gen_node(GEN_DIM,a,b)
#define gen_REPEAT(a,b)   \
	gen_node(GEN_REPEAT,a,b)
#define gen_DECL(a,b,c)   \
	gen_node(GEN_DECL,a,b,c)
#define gen_PARALLELLOOP(a,b,c,d,e)   \
	gen_node(GEN_PARALLELLOOP,a,b,c,d,e)
#define gen_PRIVATE(a,b)   \
	gen_node(GEN_PRIVATE,a,b)
#define gen_STOPLOOP(a,b)   \
	gen_node(GEN_STOPLOOP,a,b)
#define gen_NONE()   \
	gen_node(GEN_NONE)
#define gen_TRIPLET(a,b,c)   \
	gen_node(GEN_TRIPLET,a,b,c)
#define gen_ALLOCATABLE(a,b)   \
	gen_node(GEN_ALLOCATABLE,a,b)
#define gen_ALLOCATE(a,b)   \
	gen_node(GEN_ALLOCATE,a,b)
#define gen_DEALLOCATE(a,b)   \
	gen_node(GEN_DEALLOCATE,a,b)
#define gen_WHERE_BLOCK(a,b,c)   \
	gen_node(GEN_WHERE_BLOCK,a,b,c)
#define gen_WHERE(a,b,c)   \
	gen_node(GEN_WHERE,a,b,c)

#endif
